import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap, LayersControl } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import ReactDOMServer from 'react-dom/server';
import MyCustomMarkerContent from './MyCustomMarkerContent';
import MapEventsHandler from './MapEventsHandler';



// Function to create a custom divIcon from a React component
const createCustomDivIcon = (churchData) => {
  const iconHtml = ReactDOMServer.renderToString(
    <MyCustomMarkerContent
      churchName={churchData.church_name}
      churchStatus={churchData.church_status}
      isSelected={churchData.isSelected}
    />
  );

  return L.divIcon({
    className: 'custom-div-icon', // Add a class for custom CSS if needed
    html: iconHtml,
    iconSize: [24, 29], // Size of the div (width, height) to encompass the visual marker
    iconAnchor: [12, 29], // Point of the icon which will correspond to marker's location (bottom center)
    popupAnchor: [0, -29] // Point from which the popup should open relative to the iconAnchor
  });
};

const Map = ({ onChurchSelect, onMapClick, searchQuery, selectedChurch }) => {
  const mapRef = useRef(null); // Ref to store the Leaflet map instance
  const [markers, setMarkers] = useState([]);
  const [selectedMarkerId, setSelectedMarkerId] = useState(null); // New state for selected marker ID
  const [showMarkers, setShowMarkers] = useState(false); // New state to control marker visibility
  const [filteredMarkers, setFilteredMarkers] = useState([]);
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState(searchQuery); // New state for debounced search query

  useEffect(() => {
    // Fetch all churches from your Flask API on component mount
    const fetchChurches = async () => {
      try {
        const response = await fetch('http://100.25.0.4:5000/api/churches'); // Assuming Express runs on port 5000
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        // Ensure churches have an ID and parse lat/lon
        const churchesWithParsedCoords = data.map((church) => ({
          ...church,
          id: church.id,
          latitude: parseFloat(church.latitude),
          longitude: parseFloat(church.longitude),
        }));
        setMarkers(churchesWithParsedCoords);
      } catch (error) {
        console.error("Error fetching churches:", error);
      }
    };

    fetchChurches(); // Fetch churches on initial load

    // Add click listener to clear selected marker when map is clicked
    if (mapRef.current) {
      mapRef.current.on('click', () => {
        setSelectedMarkerId(null);
        // Also clear selected church data in parent if map is clicked
        onChurchSelect(null);
      });
    }

    // Cleanup function for the map click listener
    return () => {
      if (mapRef.current) {
        mapRef.current.off('click');
      }
    };
  }, [onChurchSelect]);

  useEffect(() => {
    // When selectedChurch becomes null (info sidebar closed), deselect the marker
    if (!selectedChurch) {
      setSelectedMarkerId(null);
    }
  }, [selectedChurch]);

  useEffect(() => {
    if (!selectedChurch) {
      setSelectedMarkerId(null);
    }
  }, [selectedChurch]);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery);
    }, 500); // 500ms debounce time

    return () => {
      clearTimeout(handler);
    };
  }, [searchQuery]);

  useEffect(() => {
    const lowerCaseQuery = debouncedSearchQuery.toLowerCase();
    const filtered = markers.filter(marker =>
      marker.church_name.toLowerCase().includes(lowerCaseQuery) ||
      marker.church_street_purok.toLowerCase().includes(lowerCaseQuery) ||
      marker.church_barangay.toLowerCase().includes(lowerCaseQuery) ||
      marker.church_town.toLowerCase().includes(lowerCaseQuery)
    );
    setFilteredMarkers(filtered);
    setShowMarkers(debouncedSearchQuery !== '' && filtered.length > 0); // Only show markers if there's a non-empty search query and results
  }, [debouncedSearchQuery, markers]);

  const handleMarkerClick = async (church) => {
    setSelectedMarkerId(church.id); // Set the selected marker ID
    const currentMapZoom = mapRef.current.getZoom(); 
    const currentMapCenter = mapRef.current.getCenter();

    // Pass the full church data to the parent component (App.jsx)
    onChurchSelect(church);

    // Check if the user has zoomed in further than the default church zoom (13)
    if (currentMapZoom > 13) {
    }

    // Only zoom if the map is currently at a wider view
    if (currentMapZoom < 13) { 
      const rawLat = church.latitude;
      const rawLon = church.longitude;
      // Directly set view on the Leaflet map instance
      mapRef.current.setView([rawLat, rawLon], 13, { animate: false });
    } else {
    }
  };

  

  return (
    <MapContainer
      center={[15.58, 121]} // Initial map center
      zoom={11} // Initial map zoom
      style={{ height: '100vh', width: '100%' }}
      zoomAnimation={true}
      zoomAnimationDuration={2}
      scrollWheelZoom={true} // Control scroll wheel zoom
      doubleClickZoom={true} // Control double click zoom
      dragging={true} // Control dragging
      touchZoom={true} // Control touch zoom
      zoomControl={true} // Control the +/- zoom control buttons
      attributionControl={false} // Disable default Leaflet attribution control
    >
      
      <MapEventsHandler onMapInstanceReady={(mapInstance) => { mapRef.current = mapInstance; }} onMapClick={onMapClick} />

      <LayersControl position="topright">
        <LayersControl.BaseLayer checked name="CartoDB Positron">
          <TileLayer
            url="https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png"
          />
        </LayersControl.BaseLayer>

        <LayersControl.BaseLayer name="Google Maps">
          <TileLayer
            url="https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}"
          />
        </LayersControl.BaseLayer>

        <LayersControl.BaseLayer name="Google View">
          <TileLayer
            url="https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}"
          />
        </LayersControl.BaseLayer>
      </LayersControl>

      {showMarkers && filteredMarkers.map((marker) => {
        return (
        <Marker
          key={marker.id}
          position={[marker.latitude, marker.longitude]}
          icon={createCustomDivIcon({ churchName: marker.church_name, churchStatus: marker.church_status, isSelected: marker.id === selectedMarkerId })} // Use the function to create the divIcon
          eventHandlers={{
            click: () => handleMarkerClick(marker),
          }}
        >
        </Marker>
      )})}
    </MapContainer>
  );
};

export default Map;