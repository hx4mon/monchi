import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import ReactDOMServer from 'react-dom/server';
import MyCustomMarkerContent from './MyCustomMarkerContent';
import MapEventsHandler from './MapEventsHandler';

// Component to handle map view changes
function ChangeView({ center, zoom }) {
  const map = useMap();
  map.setView(center, zoom);
  return null;
}

// Function to create a custom divIcon from a React component
const createCustomDivIcon = (markerData) => {
  const iconHtml = ReactDOMServer.renderToString(
    <MyCustomMarkerContent
      description={markerData.description}
      type={markerData.type}
    />
  );

  return L.divIcon({
    className: 'custom-div-icon', // Add a class for custom CSS if needed
    html: iconHtml,
    iconSize: [24, 29], // Size of the div (width, height) to encompass the visual marker
    iconAnchor: [12, 29], // Point of the icon which will correspond to marker's location (bottom center)
    popupAnchor: [0, -29] // Point from which the popup should open relative to the iconAnchor
  });
};

const Map = () => {
  const mapRef = useRef(null); // Ref to store the Leaflet map instance
  const [markers, setMarkers] = useState([]);
  const [selectedMarkerData, setSelectedMarkerData] = useState(null);
  const [mapCenter, setMapCenter] = useState([15.58, 121]); // State for map center
  const [mapZoom, setMapZoom] = useState(11); // State for map zoom
  const [lastClickedMarkerId, setLastClickedMarkerId] = useState(null); // New state for last clicked marker
  const [isZoomEnabled, setIsZoomEnabled] = useState(true); // New state to control zoom interaction

  // Effect to re-enable zoom if the user manually zooms out significantly
  useEffect(() => {
    // If the map is zoomed out to 15 or less, re-enable zoom controls
    if (mapZoom <= 15) { 
      setIsZoomEnabled(true);
    }
  }, [mapZoom]); // Re-run this effect whenever mapZoom changes

  useEffect(() => {
    // Fetch all markers from your Flask API on component mount
    const fetchMarkers = async () => {
      try {
        const response = await fetch('http://localhost:5000/api/markers'); // Assuming Flask runs on port 5000
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        // Ensure markers have an ID and a type (default to 'general' if not provided by API)
        const markersWithIdsAndType = data.map((marker, index) => ({
          ...marker,
          id: marker.id || index + 1,
          latitude: parseFloat(marker.latitude.toFixed(8)),
          longitude: parseFloat(marker.longitude.toFixed(8)),
          type: marker.type || 'general'
        }));
        setMarkers(markersWithIdsAndType);
      } catch (error) {
        console.error("Error fetching markers:", error);
      }
    };

    fetchMarkers();
  }, []);

  const handleMarkerClick = async (markerId, markerLat, markerLon) => {
    setLastClickedMarkerId(markerId); // Set the last clicked marker ID
    // Get the actual current zoom level from the map instance via ref
    const currentMapZoom = mapRef.current ? mapRef.current.getZoom() : mapZoom; 
    try {
      const response = await fetch(`http://localhost:5000/api/markers/${markerId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setSelectedMarkerData(data);

      // Only zoom and disable further zoom if the map is currently at a wider view
      if (currentMapZoom < 13) { 
        const roundedLat = parseFloat(markerLat.toFixed(8));
        const roundedLon = parseFloat(markerLon.toFixed(8));
        setMapCenter([roundedLat, roundedLon]); // Center map on clicked marker
        setMapZoom(13); // Zoom to 13
        setIsZoomEnabled(false); // Disable zoom after zooming in on a marker
      }
    } catch (error) {
      console.error("Error fetching marker details:", error);
      setSelectedMarkerData(null); // Clear data if fetch fails
    }
  };

  const handleUpdateMarkerColor = async () => {
    if (!lastClickedMarkerId) {
      alert("Please click a marker first!");
      return;
    }

    // Determine current type to toggle
    const currentMarker = markers.find(m => m.id === lastClickedMarkerId);
    const newType = currentMarker && currentMarker.type === 'talavera' ? 'general' : 'talavera';

    try {
      const response = await fetch(`http://localhost:5000/api/markers/${lastClickedMarkerId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ type: newType }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Update the specific marker in the state directly
      setMarkers(prevMarkers =>
        prevMarkers.map(marker =>
          marker.id === lastClickedMarkerId ? { ...marker, type: newType } : marker
        )
      );

      console.log(`Marker ${lastClickedMarkerId} updated to type ${newType}`);
    } catch (error) {
      console.error("Error updating marker color:", error);
    }
  };

  return (
    console.log("Current mapZoom state:", mapZoom),
    <MapContainer
      center={mapCenter}
      zoom={mapZoom}
      style={{ height: '100vh', width: '100%' }}
      zoomAnimation={true}
      zoomAnimationDuration={2}
      scrollWheelZoom={isZoomEnabled} // Control scroll wheel zoom
      doubleClickZoom={isZoomEnabled} // Control double click zoom
      dragging={isZoomEnabled} // Control dragging
      touchZoom={isZoomEnabled} // Control touch zoom
      zoomControl={isZoomEnabled} // Control the +/- zoom control buttons
    >
      <ChangeView center={mapCenter} zoom={mapZoom} />
      <MapEventsHandler onMapInstanceReady={(mapInstance) => { mapRef.current = mapInstance; }} />
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />

      <button
        onClick={handleUpdateMarkerColor}
        style={{
          position: 'absolute',
          top: '10px',
          left: '10px',
          zIndex: 1000,
          padding: '10px',
          backgroundColor: 'white',
          border: '1px solid #ccc',
          borderRadius: '5px',
          cursor: 'pointer',
        }}
      >
        Toggle Last Clicked Marker Color
      </button>

      {markers.map((marker) => (
        <Marker
          key={marker.id}
          position={[marker.latitude, marker.longitude]}
          icon={createCustomDivIcon(marker)} // Use the function to create the divIcon
          eventHandlers={{
            click: () => handleMarkerClick(marker.id, marker.latitude, marker.longitude),
          }}
        >
          <Popup>
            {selectedMarkerData && selectedMarkerData.id === marker.id ? (
              <div>
                <h4>Marker Details:</h4>
                <table>
                  <tbody>
                    {Object.entries(selectedMarkerData).map(([key, value]) => (
                      <tr key={key}>
                        <td><strong>{key}:</strong></td>
                        <td>{String(value)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div>
                Loading details...
              </div>
            )}
          </Popup>
        </Marker>
      ))}
    </MapContainer>
  );
};

export default Map;